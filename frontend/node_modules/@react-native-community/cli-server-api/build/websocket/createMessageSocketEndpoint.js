"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMessageSocketEndpoint;
function _url() {
  const data = _interopRequireDefault(require("url"));
  _url = function () {
    return data;
  };
  return data;
}
function _ws() {
  const data = require("ws");
  _ws = function () {
    return data;
  };
  return data;
}
function _cliTools() {
  const data = require("@react-native-community/cli-tools");
  _cliTools = function () {
    return data;
  };
  return data;
}
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const PROTOCOL_VERSION = 2;
function parseMessage(data, binary) {
  if (binary) {
    _cliTools().logger.error('Expected text message, got binary!');
    return undefined;
  }
  try {
    const message = JSON.parse(data);
    if (message.version === PROTOCOL_VERSION) {
      return message;
    }
    _cliTools().logger.error(`Received message had wrong protocol version: ${message.version}`);
  } catch (e) {
    _cliTools().logger.error(`Failed to parse the message as JSON:\n${data}`);
  }
  return undefined;
}
function isBroadcast(message) {
  return typeof message.method === 'string' && message.id === undefined && message.target === undefined;
}
function isRequest(message) {
  return typeof message.method === 'string' && typeof message.target === 'string';
}
function isResponse(message) {
  return typeof message.id === 'object' && typeof message.id.requestId !== 'undefined' && typeof message.id.clientId === 'string' && (message.result !== undefined || message.error !== undefined);
}
function createMessageSocketEndpoint() {
  const wss = new (_ws().Server)({
    noServer: true
  });
  const clients = new Map();
  let nextClientId = 0;
  function getClientWs(clientId) {
    const clientWs = clients.get(clientId);
    if (c