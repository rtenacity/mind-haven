{"version":3,"names":["DEFAULT_GROUPS","rmAsync","promisify","rm","cleanDir","directory","fileExists","Promise","resolve","maxRetries","recursive","force","promptForCaches","groups","caches","prompt","type","name","message","choices","Object","entries","map","cmd","group","title","chalk","dim","description","value","selected","includes","min","clean","_argv","ctx","cleanOptions","include","projectRoot","verifyCache","Error","COMMANDS","android","tasks","label","action","gradlew","os","platform","path","join","project","sourceDir","script","basename","execa","cwd","dirname","cocoapods","undefined","metro","tmpdir","npm","bun","watchman","yarn","split","length","spinner","getLoader","commands","warn","start","then","succeed","catch","e","fail","func","options","default","process"],"sources":["../src/clean.ts"],"sourcesContent":["import {getLoader, prompt} from '@react-native-community/cli-tools';\nimport type {Config as CLIConfig} from '@react-native-community/cli-types';\nimport chalk from 'chalk';\nimport execa from 'execa';\nimport {existsSync as fileExists, rm} from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {promisify} from 'util';\n\ntype Args = {\n  include?: string;\n  projectRoot: string;\n  verifyCache?: boolean;\n};\n\ntype Task = {\n  label: string;\n  action: () => Promise<void>;\n};\n\ntype CleanGroups = {\n  [key: string]: {\n    description: string;\n    tasks: Task[];\n  };\n};\n\nconst DEFAULT_GROUPS = ['metro', 'watchman'];\n\nconst rmAsync = promisify(rm);\n\nfunction cleanDir(directory: string): Promise<void> {\n  if (!fileExists(directory)) {\n    return Promise.resolve();\n  }\n\n  return rmAsync(directory, {maxRetries: 3, recursive: true, force: true});\n}\n\nasync function promptForCaches(\n  groups: CleanGroups,\n): Promise<string[] | undefined> {\n  const {caches} = await prompt({\n    type: 'multiselect',\n    name: 'caches',\n    message: 'Select all caches to clean',\n    choices: Object.entries(groups).map(([cmd, group]) => ({\n      title: `${cmd} ${chalk.dim(`(${group.description})`)}`,\n      value: cmd,\n      selected: DEFAULT_GROUPS.includes(cmd),\n    })),\n    min: 1,\n  });\n  return caches;\n}\n\nexport async function clean(\n  _argv: string[],\n  ctx: CLIConfig,\n  cleanOptions: Args,\n): Promise<void> {\n  const {include, projectRoot, verifyCache} = cleanOptions;\n  if (!fileExists(projectRoot)) {\n    throw new Error(`Invalid path provided! ${projectRoot}`);\n  }\n\n  const COMMANDS: CleanGroups = {\n    android: {\n      description: 'Android build cache